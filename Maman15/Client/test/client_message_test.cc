#include "Maman15/Client/protocol/client_message.h"

#include <gtest/gtest.h>

#include <boost/uuid/string_generator.hpp>

class ClientMessageTest : public testing::Test {
protected:
    ClientMessageTest() : version{3}, uuid{gen("bb4f4460-3c25-11ed-b2bb-f2d20dd24480")} {}

    client::protocol::ClientVersion version;
    boost::uuids::string_generator gen;
    boost::uuids::uuid uuid;
};

TEST_F(ClientMessageTest, registration_request) {
    client::protocol::RegistrationRequestMessage message{version, uuid, string("hello")};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2',
                    'D', '\x80', '\x03', 'L', '\x04', '\xff', '\x00', '\x00', '\x00', 'h', 'e', 'l', 'l', 'o', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'};
    ASSERT_EQ(real, expected);
    ASSERT_EQ(message.get_payload_size(), 255);
}

static const string public_key{
    '0', '\x81', '\x9d', '0', '\r', '\x06', '\t', '*', '\x86', 'H',
    '\x86', '\xf7', '\r', '\x01', '\x01', '\x01', '\x05', '\x00',
    '\x03', '\x81', '\x8b', '\x00', '0', '\x81', '\x87', '\x02',
    '\x81', '\x81', '\x00', '\xb5', '\x0c', '\xdb', 'z', 'w',
    '\x8f', 'P', '=', '\xb4', '\xfa', ' ', '\x81', '\xa3', 'm',
    '\xb2', '\xe9', '\x86', 'Y', 'D', '\xe9', 'i', '\xa3', '9',
    'A', 'X', 'w', '\xdd', 'Q', 'B', 'C', 'x', '\x1f', '\xbc',
    '\xff', '\xed', 's', '\xa7', '\x14', '=', '\xa2', 'U',
    '\x17', '\x9c', '\xff', '3', '\xf4', '\x02', '\x80', '\x98',
    '\xd4', '\xf6', '\xe6', 'J', ' ', '\x9a', '\xf7', '\xb5',
    '5', '>', '\x0c', '\x15', '8', '\xe7', '\xf8', '\x8a',
    '\xab', '\x96', '\xb1', 'G', '\xf6', '\x0f', '\x17',
    '{', '\xfb', '\xb8', '\x9b', '\xf5', '\xc4', 'r',
    '\xe2', '.', 'N', '\xad', '6', 'F', '}', '\xce',
    '\x0b', '\x94', 'S', '\xda', '\xd6', '\xab', '\\',
    '\xc0', '^', '%', '\x97', '\xfe', '@', '\x90',
    '\xbd', '7', 'B', ';', '\xce', '\xfe', '\x10', '3',
    '\xa9', 't', '\x02', '\x8a', '\x18', '9', '\xec',
    '\xff', ')', '\xfc', '\x0b', '\x81', '\xcb', '\x10',
    '\xd7', '\x08', '\'', '\xd9', '\x0b', '\x02', '\x01', '\x11'};

TEST_F(ClientMessageTest, client_public_key) {
    client::protocol::ClientPublicKeyMessage message{version, uuid, string("hello"), public_key};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2', 'D', '\x80', '\x03',
                    'M', '\x04', '\x9f', '\x01', '\x00', '\x00', 'h', 'e', 'l', 'l', 'o', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '0', '\x81', '\x9d', '0', '\r', '\x06', '\t', '*', '\x86', 'H', '\x86', '\xf7', '\r', '\x01', '\x01', '\x01', '\x05',
                    '\x00', '\x03', '\x81', '\x8b', '\x00', '0', '\x81', '\x87', '\x02', '\x81', '\x81', '\x00', '\xb5', '\x0c', '\xdb', 'z', 'w',
                    '\x8f', 'P', '=', '\xb4', '\xfa', ' ', '\x81', '\xa3', 'm', '\xb2', '\xe9', '\x86', 'Y', 'D', '\xe9', 'i', '\xa3', '9', 'A', 'X', 'w',
                    '\xdd', 'Q', 'B', 'C', 'x', '\x1f', '\xbc', '\xff', '\xed', 's', '\xa7', '\x14', '=', '\xa2', 'U', '\x17', '\x9c', '\xff', '3', '\xf4',
                    '\x02', '\x80', '\x98', '\xd4', '\xf6', '\xe6', 'J', ' ', '\x9a', '\xf7', '\xb5', '5', '>', '\x0c', '\x15', '8', '\xe7', '\xf8',
                    '\x8a', '\xab', '\x96', '\xb1', 'G', '\xf6', '\x0f', '\x17', '{', '\xfb', '\xb8', '\x9b', '\xf5', '\xc4', 'r', '\xe2', '.', 'N',
                    '\xad', '6', 'F', '}', '\xce', '\x0b', '\x94', 'S', '\xda', '\xd6', '\xab', '\\', '\xc0', '^', '%', '\x97', '\xfe', '@', '\x90',
                    '\xbd', '7', 'B', ';', '\xce', '\xfe', '\x10', '3', '\xa9', 't', '\x02', '\x8a', '\x18', '9', '\xec', '\xff', ')', '\xfc', '\x0b',
                    '\x81', '\xcb', '\x10', '\xd7', '\x08', '\'', '\xd9', '\x0b', '\x02', '\x01', '\x11'};
    ASSERT_EQ(expected, real);
    ASSERT_EQ(message.get_payload_size(), 255 + 160);
}

TEST_F(ClientMessageTest, upload_file) {
    client::protocol::UploadFileMessage message{version, uuid, string("filename"), string("thisisthecontet\nthisisanewline\nandanotherline\n")};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2', 'D', '\x80', '\x03', 'O', '\x04', '1', '\x01',
                    '\x00', '\x00', '.', '\x00', '\x00', '\x00', 'f', 'i', 'l', 'e', 'n', 'a', 'm', 'e', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
                    '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 't', 'h', 'i', 's', 'i', 's', 't', 'h', 'e', 'c', 'o', 'n', 't', 'e', 't', '\n',
                    't', 'h', 'i', 's', 'i', 's', 'a', 'n', 'e', 'w', 'l', 'i', 'n', 'e', '\n', 'a', 'n', 'd', 'a', 'n', 'o', 't', 'h', 'e', 'r', 'l', 'i', 'n', 'e', '\n'};
    ASSERT_EQ(expected, real);
    ASSERT_EQ(message.get_payload_size(), 255 + 4 + 46);
}

TEST_F(ClientMessageTest, file_crc_ok) {
    client::protocol::FileCRCOkMessage message{version, uuid};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2', 'D', '\x80', '\x03', 'P',
                    '\x04', '\x00', '\x00', '\x00', '\x00'};
    ASSERT_EQ(expected, real);
    ASSERT_EQ(message.get_payload_size(), 0);
}

TEST_F(ClientMessageTest, crc_incorrect_will_retry) {
    client::protocol::CRCIncorrectWillRetry message{version, uuid};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2', 'D', '\x80', '\x03', 'Q',
                    '\x04', '\x00', '\x00', '\x00', '\x00'};
    ASSERT_EQ(expected, real);
    ASSERT_EQ(message.get_payload_size(), 0);
}

TEST_F(ClientMessageTest, crc_incorrect_giving_up) {
    client::protocol::CRCIncorrectGivingUp message{version, uuid};
    string real{message.pack()};
    string expected{'\xbb', 'O', 'D', '`', '<', '%', '\x11', '\xed', '\xb2', '\xbb', '\xf2', '\xd2', '\r', '\xd2', 'D', '\x80', '\x03', 'R',
                    '\x04', '\x00', '\x00', '\x00', '\x00'};
    ASSERT_EQ(expected, real);
    ASSERT_EQ(message.get_payload_size(), 0);
}
